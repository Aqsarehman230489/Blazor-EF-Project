@page "/"
@using BlazorCRUD.API.Models
@using BlazorCRUD.library
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Nav
@layout LoginLayout


<section class="section1">
    <div class="form-container">
        @if (isLogin)
        {
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
               

                <div class="inputbox">
                    <ion-icon name="person-outline"></ion-icon>
                    <InputText id="username" @bind-Value="loginModel.UserName" required />
                    <label for="username">Username</label>
                </div>

                <div class="inputbox">
                    <ion-icon name="lock-closed-outline"></ion-icon>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" required />
                    <label for="password">Password</label>
                </div>

                <div class="forget">
                    <a href="#">Forgot Password?</a>
                </div>

                <button type="submit">Login</button>

                @if (!string.IsNullOrEmpty(loginErrorMessage))
                {
                    <div class="alert alert-danger mt-3">@loginErrorMessage</div>
                }

                <div class="register">
                    <p>
                        Don't have an account?
                        <a href="#" @onclick="ToggleForm">Register</a>
                    </p>
                </div>
            </EditForm>
        }
        else
        {
            <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />
               

                <div class="inputbox">
                    <ion-icon name="person-outline"></ion-icon>
                    <InputText id="reg-username" @bind-Value="registerModel.Username" required />
                    <label for="reg-username">Username</label>
                </div>

                <div class="inputbox">
                    <ion-icon name="mail-outline"></ion-icon>
                    <InputText id="reg-email" @bind-Value="registerModel.Email" type="email" required />
                    <label for="reg-email">Email</label>
                </div>

                <div class="inputbox">
                    <ion-icon name="lock-closed-outline"></ion-icon>
                    <InputText id="reg-password" @bind-Value="registerModel.Password" type="password" required />
                    <label for="reg-password">Password</label>
                </div>

                <button type="submit">Register</button>

                @if (!string.IsNullOrEmpty(registerErrorMessage))
                {
                    <div class="alert alert-danger mt-3">@registerErrorMessage</div>
                }

                <div class="register">
                    <p>
                        Already have an account?
                        <a href="#" @onclick="ToggleForm">Login</a>
                    </p>
                </div>
            </EditForm>
        }
    </div>
</section>

}

@code {
    private bool isLogin = true;

    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();
    private string loginErrorMessage = "";
    private string registerErrorMessage = "";

    private void ToggleForm()
    {
        isLogin = !isLogin;
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7007/api/Authentication/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Login successful.");
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "loggedIn", "true");
                Nav.NavigateTo("/fetchdata");
            }
            else
            {
                loginErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = $"Error during login: {ex.Message}";
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7007/api/Authentication/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Registration successful.");
                isLogin = true; 
            }
            else
            {
                registerErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            registerErrorMessage = $"Error during registration: {ex.Message}";
        }
    }
}
<style>
    * {
        margin: 0;
        padding: 0;
        font-family: 'Montserrat', sans-serif;
        box-sizing: border-box;
    }


    body {
        background: url('/images/loginbg.jpg') no-repeat center center fixed; /* Centered and fixed background */
        background-size: cover; /* Ensures the image covers the entire viewport */
        margin: 0;
        padding: 0;
    }

    .section1 {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh; /* Ensures the section spans the full viewport height */
        width: 100vw; /* Ensures the section spans the full viewport width */
        margin: 0;
        padding: 0;
    }


    .form-container {
        width: 410px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        backdrop-filter: blur(15px) brightness(80%);
        padding: 30px;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: all 0.5s ease;
    }

    h2 {
        font-size: 32px;
        color: #fff;
        text-align: center;
        margin-bottom: 20px;
    }

    .inputbox {
        position: relative;
        margin: 20px 0;
        width: 100%;
        border-bottom: 2px solid #fff;
    }

        .inputbox label {
            position: absolute;
            top: 50%;
            left: 5px;
            transform: translateY(-50%);
            color: #fff;
            font-size: 19px;
            pointer-events: none;
            transition: 0.5s;
        }

        .inputbox input {
            width: 100%;
            height: 50px;
            background: transparent;
            border: none;
            outline: none;
            font-size: 16px;
            padding: 0 35px 0 5px;
            color: #fff;
        }

        .inputbox ion-icon {
            position: absolute;
            right: 8px;
            color: #fff;
            font-size: 24px;
            top: 20px;
        }

        .inputbox input:focus ~ label,
        .inputbox input:valid ~ label {
            top: -5px;
        }

    button {
        width: 100%;
        height: 40px;
        border-radius: 5px;
        background-color: #ff8c00;
        border: none;
        outline: none;
        cursor: pointer;
        font-size: 17px;
        font-weight: 600;
        color: white;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .forget {
        margin: -10px 0 17px;
        font-size: 14px;
        color: #fff;
        display: flex;
        justify-content: flex-end;
    }

        .forget a {
            text-decoration: none;
            color: white;
            font-weight: 600;
        }

    .register {
        font-size: 14px;
        color: white;
        text-align: center;
        margin: 25px 0 10px;
    }

        .register p a {
            text-decoration: none;
            color: #fff;
            font-weight: 600;
        }

</style>