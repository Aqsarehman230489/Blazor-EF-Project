@page "/"
@using BlazorCRUD.API.Models
@using BlazorCRUD.library
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Nav

<link href="css/Login.css" rel="stylesheet" />

<section class="section1">
    <div class="form-container">
        @if (isLogin)
        {
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
               

                <div class="inputbox">
                    <ion-icon name="person-outline"></ion-icon>
                    <InputText id="username" @bind-Value="loginModel.UserName" required />
                    <label for="username">Username</label>
                </div>

                <div class="inputbox">
                    <ion-icon name="lock-closed-outline"></ion-icon>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" required />
                    <label for="password">Password</label>
                </div>

                <div class="forget">
                    <a href="#">Forgot Password?</a>
                </div>

                <button type="submit">Login</button>

                @if (!string.IsNullOrEmpty(loginErrorMessage))
                {
                    <div class="alert alert-danger mt-3">@loginErrorMessage</div>
                }

                <div class="register">
                    <p>
                        Don't have an account?
                        <a href="#" @onclick="ToggleForm">Register</a>
                    </p>
                </div>
            </EditForm>
        }
        else
        {
            <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />
               

                <div class="inputbox">
                    <ion-icon name="person-outline"></ion-icon>
                    <InputText id="reg-username" @bind-Value="registerModel.Username" required />
                    <label for="reg-username">Username</label>
                </div>

                <div class="inputbox">
                    <ion-icon name="mail-outline"></ion-icon>
                    <InputText id="reg-email" @bind-Value="registerModel.Email" type="email" required />
                    <label for="reg-email">Email</label>
                </div>

                <div class="inputbox">
                    <ion-icon name="lock-closed-outline"></ion-icon>
                    <InputText id="reg-password" @bind-Value="registerModel.Password" type="password" required />
                    <label for="reg-password">Password</label>
                </div>

                <button type="submit">Register</button>

                @if (!string.IsNullOrEmpty(registerErrorMessage))
                {
                    <div class="alert alert-danger mt-3">@registerErrorMessage</div>
                }

                <div class="register">
                    <p>
                        Already have an account?
                        <a href="#" @onclick="ToggleForm">Login</a>
                    </p>
                </div>
            </EditForm>
        }
    </div>
</section>

}

@code {
    private bool isLogin = true;

    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();
    private string loginErrorMessage = "";
    private string registerErrorMessage = "";

    private void ToggleForm()
    {
        isLogin = !isLogin;
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7007/api/Authentication/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Login successful.");
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "loggedIn", "true");
                Nav.NavigateTo("/fetchdata");
            }
            else
            {
                loginErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = $"Error during login: {ex.Message}";
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7007/api/Authentication/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Registration successful.");
                isLogin = true; 
            }
            else
            {
                registerErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            registerErrorMessage = $"Error during registration: {ex.Message}";
        }
    }
}