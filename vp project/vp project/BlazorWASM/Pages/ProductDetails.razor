@page "/ProductDetails"
@using BlazorCRUD.library
@inject HttpClient http
@inject NavigationManager Nav
@inject IJSRuntime JsRuntime
<link href="css/app.css" rel="stylesheet" />

<button class="btn btn-success mt-3" @onclick="NavigateToAddProduct">Add New Product</button>

<div class="product-container mt-4">
    @if (ProductList == null || !ProductList.Any())
    {
        <p class="text-center text-muted">No products available. Loading...</p>
    }
    else
    {
        @foreach (var product in ProductList)
        {
            <div class="product-card">
                <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />
                <div class="product-details">
                    <h5 class="product-title">@product.Name</h5>
                    <p class="product-description">@product.Description</p>
                    <p class="product-price"><strong>Price:</strong> $@product.Price</p>
                    <div class="product-actions">
                        <button class="btn btn-warning" @onclick="() => EditProduct(product)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product)">Delete</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    public IEnumerable<Product> ProductList { get; set; } = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            ProductList = await http.GetFromJsonAsync<IEnumerable<Product>>("https://localhost:7007/api/Products");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private void NavigateToAddProduct()
    {
        Nav.NavigateTo("/AddProduct");
    }

    private void EditProduct(Product product)
    {
        Nav.NavigateTo($"/EditProduct/{product.Id}");
    }

    private async Task DeleteProduct(Product product)
    {
        var confirmDelete = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {product.Name}?");

        if (confirmDelete)
        {
            try
            {
                await http.DeleteAsync($"https://localhost:7007/api/Products/{product.Id}");
                ProductList = ProductList.Where(p => p.Id != product.Id).ToList();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting product: {ex.Message}");
            }
        }
    }
}

<style>
    .btn {
        padding: 10px 20px;
        font-size: 17px;
        border-radius: 16px;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .btn-warning {
        background-color: #4b4783;
        color: white;
        border: 2px solid #4b4783;
        border-radius: 20px;
    }

        .btn-warning:hover {
           
            background-color: white;
            color: #4b4783;
         
        }

    .btn-danger {
        background-color: #c70909;
        color: white;
        border: 3px solid #c70909;
        border-radius: 20px;
    }

        .btn-danger:hover {
            background-color: #c70909;
            color: white;
            background-color: white;
            color: #c70909;
        }

    .product-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3 cards per row */
    gap: 20px;
    padding: 20px;
}

    .product-card {
        display: flex;
        flex-direction: column;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        width: 300px; /* Reduced width */
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

    .product-image {
        width: 100%;
        height: 160px; /* Reduced height */
        object-fit: cover;
    }

    .product-details {
        padding: 14px;
        text-align: left;
        flex: 1;
    }

    .product-title {
        font-size: 16px; /* Slightly smaller font */
        font-weight: bold;
        color: #333;
        margin-bottom: 7px;
    }

    .product-description {
        font-size: 13px; /* Slightly smaller font */
        color: #666;
        margin-bottom: 7px;
    }

    .product-price {
        font-size: 14px; /* Slightly smaller font */
        font-weight: bold;
        color: #000;
        margin-bottom: 10px;
    }

    .product-actions {
        display: flex;
        justify-content: space-between;
    }


</style>
